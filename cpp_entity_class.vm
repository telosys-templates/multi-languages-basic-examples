/*
 * C++ class for entity "${entity.name}" 
 * Created on $now.date ( $now.time ) generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------
#set($env.language = "C++")
##--------------------------------------------------------------------------------------------------

${SHARP}include <iostream>
${SHARP}include <ctime>  // for std::tm and std::time_t
${SHARP}include <list>
${SHARP}include <vector> // for std::vector
using namespace std;

class ${entity.name} {
  public:
    // Primary Key
#foreach( $attribute in $entity.keyAttributes )
    $attribute.formattedType(15) $attribute.name ;
#end
    // Other fields
#foreach( $attribute in $entity.nonKeyAttributes )
    $attribute.formattedType(15) $attribute.name ; 
#end

    // Constructor
    ${entity.name}() {  
        cout << "Constructor \n";
    }

    // Destructor
    ~${entity.name}() {  
        cout << "Destructor \n";
    }
    
    void method1() { // method inside class
        cout << "method #1 \n";
    }

    void method2(); // method outside class
};

// Method/function definition outside the class
void ${entity.name}::method2() {
    cout << "method #2 \n";
}

int main() {
  cout << "Hello World, let's play with ${entity.name} class\n";  
  ${entity.name} o; // Create a new object of ${entity.name} (call constructor)
  o.method1();
  o.method2();
  return 0;
}
